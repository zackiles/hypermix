name: Validate Pull Request

on:
  pull_request:
    branches: ['**']
  push:
    branches-ignore:
      - main

jobs:
  check-skip:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      should-skip: ${{ steps.check-commit-msg.outputs.should-skip }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Check commit message for skip keywords
        id: check-commit-msg
        run: |
          # Get the commit message
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            COMMIT_MSG=$(git log -1 --pretty=%B ${{ github.event.pull_request.head.sha }})
          else
            COMMIT_MSG=$(git log -1 --pretty=%B ${{ github.sha }})
          fi

          # Check for skip keywords
          echo "Commit message: $COMMIT_MSG"
          if echo "$COMMIT_MSG" | grep -qE '(\[skip ci\]|\[skip workflow\]|chore\(release\):|release\(|version\()'; then
            echo "Skip keywords found in commit message, skipping workflow"
            echo "should-skip=true" >> $GITHUB_OUTPUT
          else
            echo "No skip keywords found, proceeding with workflow"
            echo "should-skip=false" >> $GITHUB_OUTPUT
          fi

  validate:
    needs: check-skip
    if: ${{ needs.check-skip.outputs.should-skip != 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg zip unzip

      - name: Build dry run
        run: |
          echo "Running build dry run to verify compilation..."
          deno task build --bin-path=./bin-test

      - name: Check build output
        run: |
          echo "Verifying build output..."
          
          if [ ! -d "./bin-test" ]; then
            echo "ERROR: Build output directory not found"
            exit 1
          fi
          
          echo "Build output directory contents:"
          ls -la ./bin-test/
          
          # Define expected platforms
          declare -a expected_platforms=(
            "x86_64-unknown-linux-gnu"
            "aarch64-unknown-linux-gnu" 
            "x86_64-apple-darwin"
            "aarch64-apple-darwin"
            "x86_64-pc-windows-msvc"
          )
          
          # Track missing files
          missing_files=0
          
          # Check each platform
          for platform in "${expected_platforms[@]}"; do
            echo ""
            echo "Checking $platform..."
            
            # Determine binary name (Windows has .exe)
            if [[ "$platform" == *"windows"* ]]; then
              binary_name="hypermix-${platform}.exe"
            else
              binary_name="hypermix-${platform}"
            fi
            
            # Check binary exists
            if [ -f "./bin-test/${binary_name}" ]; then
              echo "  ✓ Binary found: ${binary_name}"
            else
              echo "  ✗ Missing binary: ${binary_name}"
              ((missing_files++))
            fi
            
            # Check archives exist
            if [ -f "./bin-test/${binary_name}.zip" ]; then
              echo "  ✓ ZIP found: ${binary_name}.zip"
            else
              echo "  ✗ Missing ZIP: ${binary_name}.zip"
              ((missing_files++))
            fi
            
            if [ -f "./bin-test/${binary_name}.tar.gz" ]; then
              echo "  ✓ TAR.GZ found: ${binary_name}.tar.gz"
            else
              echo "  ✗ Missing TAR.GZ: ${binary_name}.tar.gz"
              ((missing_files++))
            fi
          done
          
          # Summary
          echo ""
          echo "Build verification summary:"
          echo "=========================="
          
          # Count actual files
          binary_count=$(find ./bin-test -name "hypermix-*" -type f ! -name "*.zip" ! -name "*.tar.gz" | wc -l)
          zip_count=$(find ./bin-test -name "*.zip" | wc -l)
          tar_count=$(find ./bin-test -name "*.tar.gz" | wc -l)
          
          echo "Binaries found: $binary_count"
          echo "ZIP archives found: $zip_count"
          echo "TAR.GZ archives found: $tar_count"
          
          if [ $missing_files -gt 0 ]; then
            echo ""
            echo "ERROR: $missing_files expected files are missing"
            echo "This may indicate a build script issue or platform-specific failure"
            exit 1
          else
            echo ""
            echo "✓ All expected build artifacts were created successfully"
          fi

      - name: Mock release creation (dry-run)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Simulating release creation..."
          
          # Create a temporary tag
          MOCK_TAG="pr-dryrun-${GITHUB_SHA:0:7}"

          # Create mock release notes
          echo "This is a dry run test for PR #${{ github.event.pull_request.number || 'unknown' }}" > mock_release_notes.txt
          echo "Branch: ${{ github.ref_name }}" >> mock_release_notes.txt
          echo "Commit: ${{ github.sha }}" >> mock_release_notes.txt

          echo "Would create release with tag: $MOCK_TAG"
          echo "Would upload $(find ./bin-test -name "*.zip" | wc -l) zip files"
          echo "Would upload $(find ./bin-test -name "*.tar.gz" | wc -l) tar.gz files"

          # List files that would be uploaded
          echo ""
          echo "Files that would be uploaded:"
          find ./bin-test -name "*.zip" -o -name "*.tar.gz" | sort

          echo ""
          echo "✓ Release simulation completed successfully"
